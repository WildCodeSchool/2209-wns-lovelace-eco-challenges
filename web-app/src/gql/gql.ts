/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\nquery GetChallengeById($id: String!) {\n    challengeById(id: $id) {\n      id\n      challengeName\n      description\n      category\n      level\n      startsAt\n      endAt\n      teams {\n        id\n        teamName\n        userToTeams {\n          userRole\n          user {\n            nickname\n          }\n        }\n      }\n    }\n  }\n": types.GetChallengeByIdDocument,
    "\n  query GetChallenges($itemsByPage: Int!, $pageNumber: Int!) {\n    challenges(itemsByPage: $itemsByPage, pageNumber: $pageNumber) {\n      id\n      challengeName\n      description\n      level\n      category\n      startsAt\n      endAt\n      img\n      teams {\n        id\n        teamName\n        city\n        country\n        isPublic\n        img\n        userToTeams {\n          userRole\n          user {\n            nickname\n          }\n        }\n      }\n    }\n  }\n": types.GetChallengesDocument,
    "\nquery GetChallenges($itemsByPage: Int!, $pageNumber: Int!) {\n  challenges(itemsByPage: $itemsByPage, pageNumber: $pageNumber) {\n    id\n    challengeName\n    description\n    level\n    category\n    startsAt\n    endAt\n    img\n    teams {\n      id\n      teamName\n      city\n      country\n      isPublic\n      img\n      userToTeams {\n        userRole\n        user {\n          nickname\n        }\n      }\n    }\n  }\n}\n": types.GetChallengesDocument,
    "\n  mutation SignIn($email: String!, $password: String!) {\n    signIn(email: $email, password: $password) {\n      id\n      email\n      firstName\n      lastName\n    }\n  }\n": types.SignInDocument,
    "\n  mutation SignUp($firstName: String!, $lastName: String!, $nickname: String!, $email: String!, $city: String!, $country: String!, $password: String!) {\n    signUp(firstName: $firstName, lastName: $lastName, nickname: $nickname, email: $email, city: $city, country: $country, password: $password) {\n      id\n      email\n      firstName\n      lastName\n      nickname\n      score\n      disabled\n      city\n      country\n    }\n  }\n": types.SignUpDocument,
};

export function graphql(source: "\nquery GetChallengeById($id: String!) {\n    challengeById(id: $id) {\n      id\n      challengeName\n      description\n      category\n      level\n      startsAt\n      endAt\n      teams {\n        id\n        teamName\n        userToTeams {\n          userRole\n          user {\n            nickname\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\nquery GetChallengeById($id: String!) {\n    challengeById(id: $id) {\n      id\n      challengeName\n      description\n      category\n      level\n      startsAt\n      endAt\n      teams {\n        id\n        teamName\n        userToTeams {\n          userRole\n          user {\n            nickname\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query GetChallenges($itemsByPage: Int!, $pageNumber: Int!) {\n    challenges(itemsByPage: $itemsByPage, pageNumber: $pageNumber) {\n      id\n      challengeName\n      description\n      level\n      category\n      startsAt\n      endAt\n      img\n      teams {\n        id\n        teamName\n        city\n        country\n        isPublic\n        img\n        userToTeams {\n          userRole\n          user {\n            nickname\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetChallenges($itemsByPage: Int!, $pageNumber: Int!) {\n    challenges(itemsByPage: $itemsByPage, pageNumber: $pageNumber) {\n      id\n      challengeName\n      description\n      level\n      category\n      startsAt\n      endAt\n      img\n      teams {\n        id\n        teamName\n        city\n        country\n        isPublic\n        img\n        userToTeams {\n          userRole\n          user {\n            nickname\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\nquery GetChallenges($itemsByPage: Int!, $pageNumber: Int!) {\n  challenges(itemsByPage: $itemsByPage, pageNumber: $pageNumber) {\n    id\n    challengeName\n    description\n    level\n    category\n    startsAt\n    endAt\n    img\n    teams {\n      id\n      teamName\n      city\n      country\n      isPublic\n      img\n      userToTeams {\n        userRole\n        user {\n          nickname\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetChallenges($itemsByPage: Int!, $pageNumber: Int!) {\n  challenges(itemsByPage: $itemsByPage, pageNumber: $pageNumber) {\n    id\n    challengeName\n    description\n    level\n    category\n    startsAt\n    endAt\n    img\n    teams {\n      id\n      teamName\n      city\n      country\n      isPublic\n      img\n      userToTeams {\n        userRole\n        user {\n          nickname\n        }\n      }\n    }\n  }\n}\n"];
export function graphql(source: "\n  mutation SignIn($email: String!, $password: String!) {\n    signIn(email: $email, password: $password) {\n      id\n      email\n      firstName\n      lastName\n    }\n  }\n"): (typeof documents)["\n  mutation SignIn($email: String!, $password: String!) {\n    signIn(email: $email, password: $password) {\n      id\n      email\n      firstName\n      lastName\n    }\n  }\n"];
export function graphql(source: "\n  mutation SignUp($firstName: String!, $lastName: String!, $nickname: String!, $email: String!, $city: String!, $country: String!, $password: String!) {\n    signUp(firstName: $firstName, lastName: $lastName, nickname: $nickname, email: $email, city: $city, country: $country, password: $password) {\n      id\n      email\n      firstName\n      lastName\n      nickname\n      score\n      disabled\n      city\n      country\n    }\n  }\n"): (typeof documents)["\n  mutation SignUp($firstName: String!, $lastName: String!, $nickname: String!, $email: String!, $city: String!, $country: String!, $password: String!) {\n    signUp(firstName: $firstName, lastName: $lastName, nickname: $nickname, email: $email, city: $city, country: $country, password: $password) {\n      id\n      email\n      firstName\n      lastName\n      nickname\n      score\n      disabled\n      city\n      country\n    }\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;